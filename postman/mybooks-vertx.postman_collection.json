{
	"info": {
		"_postman_id": "5c8b13a7-4786-4f37-b6fb-43a804375464",
		"name": "mybooks-vertx",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "about",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{auth-base-url}}/about",
							"host": [
								"{{auth-base-url}}"
							],
							"path": [
								"about"
							]
						}
					},
					"response": [
						{
							"name": "about : 200 - authorized request, full info",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/about",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"about"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "content-length",
									"value": "160"
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"33078dd\",\n    \"revision\": \"33078dddc08628fec9a064204463b4f8f037f4eb\",\n    \"built_at\": \"2020-03-10T22:08:30.222366Z\",\n    \"server_time\": \"2020-03-10T22:09:03.368120Z\"\n}"
						},
						{
							"name": "about : 200 - unauthorized request - brief info",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/about",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"about"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "content-length",
									"value": "21"
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"33078dd\"\n}"
						}
					]
				},
				{
					"name": "health",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{auth-base-url}}/health",
							"host": [
								"{{auth-base-url}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": [
						{
							"name": "health : 200 - unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/health",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"health"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "content-type",
									"value": "text/plain"
								},
								{
									"key": "content-length",
									"value": "2"
								}
							],
							"cookie": [],
							"body": "OK"
						},
						{
							"name": "health : 200 - authorized - detailed info",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/health",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"health"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "content-length",
									"value": "28"
								}
							],
							"cookie": [],
							"body": "{\n    \"checks\": [],\n    \"outcome\": \"UP\"\n}"
						}
					]
				},
				{
					"name": "ready",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{auth-base-url}}/ready",
							"host": [
								"{{auth-base-url}}"
							],
							"path": [
								"ready"
							]
						}
					},
					"response": [
						{
							"name": "ready : 200 - unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/ready",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"ready"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "content-type",
									"value": "text/plain"
								},
								{
									"key": "content-length",
									"value": "2"
								}
							],
							"cookie": [],
							"body": "OK"
						},
						{
							"name": "ready : 200 - authorized - detailed info",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/ready",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"ready"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "content-length",
									"value": "28"
								}
							],
							"cookie": [],
							"body": "{\n    \"checks\": [],\n    \"outcome\": \"UP\"\n}"
						}
					]
				},
				{
					"name": "get user-token",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{auth-base-url}}/user-token?claims=eyJzdWIiOiIyZTBjNzExMy0wZTk3LTQ5ZTYtODYzMS00YmE5NTcwMGY4MGQiLCJkZXZpY2VfaWQiOiI5MTQ1ZDA2MS1mZmE2LTQwYWUtYmY3MS1jMmE0ZGFlMzBiZjEiLCJrMSI6InYxIiwiazIiOiJ2MiJ9",
							"host": [
								"{{auth-base-url}}"
							],
							"path": [
								"user-token"
							],
							"query": [
								{
									"key": "claims",
									"value": "eyJzdWIiOiIyZTBjNzExMy0wZTk3LTQ5ZTYtODYzMS00YmE5NTcwMGY4MGQiLCJkZXZpY2VfaWQiOiI5MTQ1ZDA2MS1mZmE2LTQwYWUtYmY3MS1jMmE0ZGFlMzBiZjEiLCJrMSI6InYxIiwiazIiOiJ2MiJ9",
									"description": "Base64 encoded user-token json claims"
								}
							]
						}
					},
					"response": [
						{
							"name": "get user-token : 400 - malformed claims (not base64 encoded json)",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/user-token?claims=eyJzdWIiOiIyZTBjNzExMy0wZTk3asdfS00YmE5NTcwMGY4MGQiLCJkZXZpY2VfaWQiOiI5MTQ1ZDA2MS1mZmE2LTQwYWUtYmY3MS1jMmE0ZGFlMzBiZjEiLCJrMSI6InYxIiwiazIiOiJ2MiJ9",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"user-token"
									],
									"query": [
										{
											"key": "claims",
											"value": "eyJzdWIiOiIyZTBjNzExMy0wZTk3asdfS00YmE5NTcwMGY4MGQiLCJkZXZpY2VfaWQiOiI5MTQ1ZDA2MS1mZmE2LTQwYWUtYmY3MS1jMmE0ZGFlMzBiZjEiLCJrMSI6InYxIiwiazIiOiJ2MiJ9",
											"description": "Base64 encoded user-token json claims"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "transfer-encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "message: Value doesn't respect pattern ^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$\ntype: NO_MATCH\nparam: claims\nvalue: [eyJzdWIiOiIyZTBjNzExMy0wZTk3asdfS00YmE5NTcwMGY4MGQiLCJkZXZpY2VfaWQiOiI5MTQ1ZDA2MS1mZmE2LTQwYWUtYmY3MS1jMmE0ZGFlMzBiZjEiLCJrMSI6InYxIiwiazIiOiJ2MiJ9]\nrule: ParameterValidationRuleImpl{name='claims', validator=io.vertx.ext.web.api.validation.impl.StringTypeValidator@420540e2, location=QUERY, isOptional=false, allowEmptyValue=false}ValidationException{parameterName='claims', validationRule=ParameterValidationRuleImpl{name='claims', validator=io.vertx.ext.web.api.validation.impl.StringTypeValidator@420540e2, location=QUERY, isOptional=false, allowEmptyValue=false}, value='[eyJzdWIiOiIyZTBjNzExMy0wZTk3asdfS00YmE5NTcwMGY4MGQiLCJkZXZpY2VfaWQiOiI5MTQ1ZDA2MS1mZmE2LTQwYWUtYmY3MS1jMmE0ZGFlMzBiZjEiLCJrMSI6InYxIiwiazIiOiJ2MiJ9]', message='Value doesn't respect pattern ^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$', errorType=NO_MATCH}\n\tat io.vertx.ext.web.api.validation.ValidationException$ValidationExceptionFactory.generateNotMatchValidationException(ValidationException.java:193)\n\tat io.vertx.ext.web.api.validation.impl.StringTypeValidator.isValidSingleParam(StringTypeValidator.java:53)\n\tat io.vertx.ext.web.api.validation.impl.SingleValueParameterTypeValidator.isValid(SingleValueParameterTypeValidator.java:24)\n\tat io.vertx.ext.web.api.validation.impl.SingleValueParameterTypeValidator.isValidCollection(SingleValueParameterTypeValidator.java:36)\n\tat io.vertx.ext.web.api.validation.impl.ParameterValidationRuleImpl.callValidator(ParameterValidationRuleImpl.java:52)\n\tat io.vertx.ext.web.api.validation.impl.ParameterValidationRuleImpl.validateArrayParam(ParameterValidationRuleImpl.java:79)\n\tat io.vertx.ext.web.api.validation.impl.BaseValidationHandler.validateQueryParams(BaseValidationHandler.java:188)\n\tat io.vertx.ext.web.api.validation.impl.BaseValidationHandler.handle(BaseValidationHandler.java:59)\n\tat io.vertx.ext.web.api.validation.impl.BaseValidationHandler.handle(BaseValidationHandler.java:21)\n\tat io.vertx.reactivex.ext.web.api.validation.HTTPRequestValidationHandler.handle(HTTPRequestValidationHandler.java:91)\n\tat io.vertx.reactivex.ext.web.api.validation.HTTPRequestValidationHandler.handle(HTTPRequestValidationHandler.java:51)\n\tat io.vertx.reactivex.ext.web.Route$1.handle(Route.java:155)\n\tat io.vertx.reactivex.ext.web.Route$1.handle(Route.java:153)\n\tat io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1034)\n\tat io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:95)\n\tat io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:130)\n\tat io.vertx.reactivex.ext.web.RoutingContext.next(RoutingContext.java:123)\n\tat dburyak.demo.mybooks.auth.endpoints.GetUserTokenEndpoint.lambda$reqAccessHandler$0(GetUserTokenEndpoint.java:59)\n\tat io.reactivex.internal.observers.ConsumerSingleObserver.onSuccess(ConsumerSingleObserver.java:62)\n\tat io.vertx.reactivex.impl.AsyncResultSingle.lambda$subscribeActual$0(AsyncResultSingle.java:49)\n\tat io.vertx.ext.auth.AbstractUser.lambda$isAuthorized$0(AbstractUser.java:55)\n\tat io.vertx.ext.auth.jwt.impl.JWTUser.doIsPermitted(JWTUser.java:91)\n\tat io.vertx.ext.auth.AbstractUser.isAuthorized(AbstractUser.java:49)\n\tat io.vertx.reactivex.ext.auth.User.isAuthorized(User.java:81)\n\tat io.vertx.reactivex.ext.auth.User.lambda$rxIsAuthorized$1(User.java:93)\n\tat io.vertx.reactivex.impl.AsyncResultSingle.subscribeActual(AsyncResultSingle.java:45)\n\tat io.reactivex.Single.subscribe(Single.java:3603)\n\tat io.reactivex.Single.subscribe(Single.java:3589)\n\tat dburyak.demo.mybooks.auth.endpoints.GetUserTokenEndpoint.lambda$reqAccessHandler$2(GetUserTokenEndpoint.java:55)\n\tat io.vertx.reactivex.ext.web.Route$1.handle(Route.java:155)\n\tat io.vertx.reactivex.ext.web.Route$1.handle(Route.java:153)\n\tat io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1034)\n\tat io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:131)\n\tat io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:130)\n\tat io.vertx.ext.web.handler.impl.AuthHandlerImpl.lambda$authorizeUser$3(AuthHandlerImpl.java:223)\n\tat io.vertx.ext.web.handler.impl.AuthHandlerImpl.authorize(AuthHandlerImpl.java:107)\n\tat io.vertx.ext.web.handler.impl.AuthHandlerImpl.authorizeUser(AuthHandlerImpl.java:217)\n\tat io.vertx.ext.web.handler.impl.AuthHandlerImpl.lambda$null$1(AuthHandlerImpl.java:161)\n\tat io.vertx.ext.auth.jwt.impl.JWTAuthProviderImpl.authenticate(JWTAuthProviderImpl.java:150)\n\tat io.vertx.ext.web.handler.impl.AuthHandlerImpl.lambda$handle$2(AuthHandlerImpl.java:150)\n\tat io.vertx.ext.web.handler.impl.JWTAuthHandlerImpl.lambda$parseCredentials$0(JWTAuthHandlerImpl.java:76)\n\tat io.vertx.ext.web.handler.impl.AuthorizationAuthHandler.parseAuthorization(AuthorizationAuthHandler.java:97)\n\tat io.vertx.ext.web.handler.impl.JWTAuthHandlerImpl.parseCredentials(JWTAuthHandlerImpl.java:70)\n\tat io.vertx.ext.web.handler.impl.AuthHandlerImpl.handle(AuthHandlerImpl.java:129)\n\tat io.vertx.ext.web.handler.impl.AuthHandlerImpl.handle(AuthHandlerImpl.java:39)\n\tat io.vertx.reactivex.ext.web.handler.JWTAuthHandler.handle(JWTAuthHandler.java:78)\n\tat io.vertx.reactivex.ext.web.handler.JWTAuthHandler.handle(JWTAuthHandler.java:38)\n\tat io.vertx.reactivex.ext.web.Route$1.handle(Route.java:155)\n\tat io.vertx.reactivex.ext.web.Route$1.handle(Route.java:153)\n\tat io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1034)\n\tat io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:131)\n\tat io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:130)\n\tat io.vertx.ext.web.impl.RouterImpl.handle(RouterImpl.java:54)\n\tat io.vertx.ext.web.impl.RouterImpl.handle(RouterImpl.java:36)\n\tat io.vertx.reactivex.ext.web.Router.handle(Router.java:79)\n\tat io.vertx.reactivex.ext.web.Router.handle(Router.java:39)\n\tat io.vertx.reactivex.core.http.HttpServer$1.handle(HttpServer.java:108)\n\tat io.vertx.reactivex.core.http.HttpServer$1.handle(HttpServer.java:106)\n\tat io.vertx.core.http.impl.WebSocketRequestHandler.handle(WebSocketRequestHandler.java:50)\n\tat io.vertx.core.http.impl.WebSocketRequestHandler.handle(WebSocketRequestHandler.java:32)\n\tat io.vertx.core.http.impl.Http1xServerConnection.handleMessage(Http1xServerConnection.java:136)\n\tat io.vertx.core.impl.ContextImpl.executeTask(ContextImpl.java:369)\n\tat io.vertx.core.impl.EventLoopContext.execute(EventLoopContext.java:43)\n\tat io.vertx.core.impl.ContextImpl.executeFromIO(ContextImpl.java:232)\n\tat io.vertx.core.net.impl.VertxHandler.channelRead(VertxHandler.java:173)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:93)\n\tat io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler.channelRead(WebSocketServerExtensionHandler.java:102)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:328)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:302)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1422)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:931)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:700)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:635)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:552)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:514)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$6.run(SingleThreadEventExecutor.java:1044)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:830)\n\nBad Request"
						},
						{
							"name": "get user-token : 200 - tokens generated successfully",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/user-token?claims=eyJzdWIiOiIyZTBjNzExMy0wZTk3LTQ5ZTYtODYzMS00YmE5NTcwMGY4MGQiLCJkZXZpY2VfaWQiOiI5MTQ1ZDA2MS1mZmE2LTQwYWUtYmY3MS1jMmE0ZGFlMzBiZjEiLCJrMSI6InYxIiwiazIiOiJ2MiJ9",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"user-token"
									],
									"query": [
										{
											"key": "claims",
											"value": "eyJzdWIiOiIyZTBjNzExMy0wZTk3LTQ5ZTYtODYzMS00YmE5NTcwMGY4MGQiLCJkZXZpY2VfaWQiOiI5MTQ1ZDA2MS1mZmE2LTQwYWUtYmY3MS1jMmE0ZGFlMzBiZjEiLCJrMSI6InYxIiwiazIiOiJ2MiJ9",
											"description": "Base64 encoded user-token json claims"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "content-length",
									"value": "395"
								}
							],
							"cookie": [],
							"body": "{\n    \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIyZTBjNzExMy0wZTk3LTQ5ZTYtODYzMS00YmE5NTcwMGY4MGQiLCJkZXZpY2VfaWQiOiI5MTQ1ZDA2MS1mZmE2LTQwYWUtYmY3MS1jMmE0ZGFlMzBiZjEiLCJrMSI6InYxIiwiazIiOiJ2MiIsImlhdCI6MTU4Mzg3NDYxOSwiZXhwIjoxNTgzODc0OTE5LCJpc3MiOiJteWJvb2tzLnNlcnZpY2UuYXV0aCJ9.wbBC82t1VWZHmHd7m8iWTj8KB9Z5Hu6vCMamTHevMxI\",\n    \"refresh_token\": \"f76bc298-aacb-4cca-ad9f-7426781eff37\"\n}"
						}
					]
				},
				{
					"name": "refresh user-token",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{auth-base-url}}/user-token/f0d671bd-79a1-450f-b664-c118eed88384",
							"host": [
								"{{auth-base-url}}"
							],
							"path": [
								"user-token",
								"f0d671bd-79a1-450f-b664-c118eed88384"
							]
						}
					},
					"response": [
						{
							"name": "refresh user-token : 404 - refresh token not registered",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base-url}}/user-token/6ee3e98a-715d-4bde-9e1d-67c334d48b5d",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"user-token",
										"6ee3e98a-715d-4bde-9e1d-67c334d48b5d"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "transfer-encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "dburyak.demo.mybooks.auth.service.RefreshTokenNotRegisteredException: 6ee3e98a-715d-4bde-9e1d-67c334d48b5d\n\tat dburyak.demo.mybooks.auth.service.UserTokenService.refreshTokens(UserTokenService.java:90)\n\tat dburyak.demo.mybooks.auth.endpoints.RefreshUserTokenEndpoint.lambda$reqHandler$2(RefreshUserTokenEndpoint.java:51)\n\tat io.vertx.reactivex.ext.web.Route$1.handle(Route.java:155)\n\tat io.vertx.reactivex.ext.web.Route$1.handle(Route.java:153)\n\tat io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1034)\n\tat io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:95)\n\tat io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:130)\n\tat io.vertx.ext.web.api.validation.impl.BaseValidationHandler.handle(BaseValidationHandler.java:95)\n\tat io.vertx.ext.web.api.validation.impl.BaseValidationHandler.handle(BaseValidationHandler.java:21)\n\tat io.vertx.reactivex.ext.web.api.validation.HTTPRequestValidationHandler.handle(HTTPRequestValidationHandler.java:91)\n\tat io.vertx.reactivex.ext.web.api.validation.HTTPRequestValidationHandler.handle(HTTPRequestValidationHandler.java:51)\n\tat io.vertx.reactivex.ext.web.Route$1.handle(Route.java:155)\n\tat io.vertx.reactivex.ext.web.Route$1.handle(Route.java:153)\n\tat io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1034)\n\tat io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:131)\n\tat io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:130)\n\tat io.vertx.ext.web.impl.RouterImpl.handle(RouterImpl.java:54)\n\tat io.vertx.ext.web.impl.RouterImpl.handle(RouterImpl.java:36)\n\tat io.vertx.reactivex.ext.web.Router.handle(Router.java:79)\n\tat io.vertx.reactivex.ext.web.Router.handle(Router.java:39)\n\tat io.vertx.reactivex.core.http.HttpServer$1.handle(HttpServer.java:108)\n\tat io.vertx.reactivex.core.http.HttpServer$1.handle(HttpServer.java:106)\n\tat io.vertx.core.http.impl.WebSocketRequestHandler.handle(WebSocketRequestHandler.java:50)\n\tat io.vertx.core.http.impl.WebSocketRequestHandler.handle(WebSocketRequestHandler.java:32)\n\tat io.vertx.core.http.impl.Http1xServerConnection.handleMessage(Http1xServerConnection.java:136)\n\tat io.vertx.core.impl.ContextImpl.executeTask(ContextImpl.java:369)\n\tat io.vertx.core.impl.EventLoopContext.execute(EventLoopContext.java:43)\n\tat io.vertx.core.impl.ContextImpl.executeFromIO(ContextImpl.java:232)\n\tat io.vertx.core.net.impl.VertxHandler.channelRead(VertxHandler.java:173)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:93)\n\tat io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler.channelRead(WebSocketServerExtensionHandler.java:102)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:328)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:302)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1422)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:931)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:700)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:635)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:552)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:514)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$6.run(SingleThreadEventExecutor.java:1044)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:830)\n\nNot Found"
						},
						{
							"name": "refresh user-token : 200 - token successfully refreshed",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base-url}}/user-token/f0d671bd-79a1-450f-b664-c118eed88384",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"user-token",
										"f0d671bd-79a1-450f-b664-c118eed88384"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "content-length",
									"value": "490"
								}
							],
							"cookie": [],
							"body": "{\n    \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOnsiJG9pZCI6IjVlNjZiZTFhNWNmNGY4YzUyNGNhMDQwZCJ9LCJzdWIiOiIyZTBjNzExMy0wZTk3LTQ5ZTYtODYzMS00YmE5NTcwMGY4MGQiLCJkZXZpY2VfaWQiOiI5MTQ1ZDA2MS1mZmE2LTQwYWUtYmY3MS1jMmE0ZGFlMzBiZjEiLCJrMSI6InYxIiwiazIiOiJ2MiIsImF1ZCI6Im15Ym9va3Muc2VydmljZS5hdXRoIiwiaXNzIjoibXlib29rcy5zZXJ2aWNlLmF1dGgiLCJpYXQiOjE1ODM4NzQ0ODUsImV4cCI6MTU4Mzg3NDc4NX0._GUXrbULrLI8iz858V0mLq4ZXIpLy5JtoZmRENto0x8\",\n    \"refresh_token\": \"fa2fc141-f655-4cb0-977b-968b912b12a1\"\n}"
						},
						{
							"name": "refresh user-token : 400 - malformed refresh token UUID",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base-url}}/user-token/f0d",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"user-token",
										"f0d"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "transfer-encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "message: Value doesn't respect pattern ^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$\ntype: NO_MATCH\nparam: refreshTokenId\nvalue: f0d\nrule: ParameterValidationRuleImpl{name='refreshTokenId', validator=io.vertx.ext.web.api.validation.impl.StringTypeValidator@5cb8c84a, location=PATH, isOptional=false, allowEmptyValue=false}ValidationException{parameterName='refreshTokenId', validationRule=ParameterValidationRuleImpl{name='refreshTokenId', validator=io.vertx.ext.web.api.validation.impl.StringTypeValidator@5cb8c84a, location=PATH, isOptional=false, allowEmptyValue=false}, value='f0d', message='Value doesn't respect pattern ^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$', errorType=NO_MATCH}\n\tat io.vertx.ext.web.api.validation.ValidationException$ValidationExceptionFactory.generateNotMatchValidationException(ValidationException.java:193)\n\tat io.vertx.ext.web.api.validation.impl.StringTypeValidator.isValidSingleParam(StringTypeValidator.java:53)\n\tat io.vertx.ext.web.api.validation.impl.SingleValueParameterTypeValidator.isValid(SingleValueParameterTypeValidator.java:24)\n\tat io.vertx.ext.web.api.validation.impl.ParameterValidationRuleImpl.callValidator(ParameterValidationRuleImpl.java:38)\n\tat io.vertx.ext.web.api.validation.impl.ParameterValidationRuleImpl.validateSingleParam(ParameterValidationRuleImpl.java:70)\n\tat io.vertx.ext.web.api.validation.impl.BaseValidationHandler.validatePathParams(BaseValidationHandler.java:110)\n\tat io.vertx.ext.web.api.validation.impl.BaseValidationHandler.handle(BaseValidationHandler.java:58)\n\tat io.vertx.ext.web.api.validation.impl.BaseValidationHandler.handle(BaseValidationHandler.java:21)\n\tat io.vertx.reactivex.ext.web.api.validation.HTTPRequestValidationHandler.handle(HTTPRequestValidationHandler.java:91)\n\tat io.vertx.reactivex.ext.web.api.validation.HTTPRequestValidationHandler.handle(HTTPRequestValidationHandler.java:51)\n\tat io.vertx.reactivex.ext.web.Route$1.handle(Route.java:155)\n\tat io.vertx.reactivex.ext.web.Route$1.handle(Route.java:153)\n\tat io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1034)\n\tat io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:131)\n\tat io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:130)\n\tat io.vertx.ext.web.impl.RouterImpl.handle(RouterImpl.java:54)\n\tat io.vertx.ext.web.impl.RouterImpl.handle(RouterImpl.java:36)\n\tat io.vertx.reactivex.ext.web.Router.handle(Router.java:79)\n\tat io.vertx.reactivex.ext.web.Router.handle(Router.java:39)\n\tat io.vertx.reactivex.core.http.HttpServer$1.handle(HttpServer.java:108)\n\tat io.vertx.reactivex.core.http.HttpServer$1.handle(HttpServer.java:106)\n\tat io.vertx.core.http.impl.WebSocketRequestHandler.handle(WebSocketRequestHandler.java:50)\n\tat io.vertx.core.http.impl.WebSocketRequestHandler.handle(WebSocketRequestHandler.java:32)\n\tat io.vertx.core.http.impl.Http1xServerConnection.handleMessage(Http1xServerConnection.java:136)\n\tat io.vertx.core.impl.ContextImpl.executeTask(ContextImpl.java:369)\n\tat io.vertx.core.impl.EventLoopContext.execute(EventLoopContext.java:43)\n\tat io.vertx.core.impl.ContextImpl.executeFromIO(ContextImpl.java:232)\n\tat io.vertx.core.net.impl.VertxHandler.channelRead(VertxHandler.java:173)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:93)\n\tat io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler.channelRead(WebSocketServerExtensionHandler.java:102)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:328)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:302)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1422)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:931)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:700)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:635)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:552)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:514)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$6.run(SingleThreadEventExecutor.java:1044)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:830)\n\nBad Request"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c82b0dc7-ea9c-447d-8376-157ab25b1675",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e6397f11-3f1a-4d18-946c-f9b1c748ca62",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user",
			"item": [
				{
					"name": "about",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user-base-url}}/about",
							"host": [
								"{{user-base-url}}"
							],
							"path": [
								"about"
							]
						}
					},
					"response": []
				},
				{
					"name": "health",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user-base-url}}/health",
							"host": [
								"{{user-base-url}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "ready",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user-base-url}}/ready",
							"host": [
								"{{user-base-url}}"
							],
							"path": [
								"ready"
							]
						}
					},
					"response": []
				},
				{
					"name": "user login",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"login\": \"admin\",\n\t\"password\": \"admin\",\n\t\"device_id\": \"2f70db61-b83a-4afd-8cbe-0212a15edb39\"\n}"
						},
						"url": {
							"raw": "{{user-base-url}}/user/login",
							"host": [
								"{{user-base-url}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "user login : 200 - success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"login\": \"admin\",\n\t\"password\": \"admin\",\n\t\"device_id\": \"2f70db61-b83a-4afd-8cbe-0212a15edb39\"\n}"
								},
								"url": {
									"raw": "{{user-base-url}}/user/login",
									"host": [
										"{{user-base-url}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "content-length",
									"value": "507"
								}
							],
							"cookie": [],
							"body": "{\n    \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI5MTdmMTlhYS05YzEwLTQ2ZjQtYTUyYi1hNDIzYjVkZTFmZGYiLCJkZXZpY2VfaWQiOiIyZjcwZGI2MS1iODNhLTRhZmQtOGNiZS0wMjEyYTE1ZWRiMzkiLCJwZXJtaXNzaW9ucyI6WyI6dXNlci10b2tlbjpnZW5lcmF0ZSIsIjp1c2VyOmxpc3Q6bm9uLXN5c3RlbSIsIjp1c2VyOmxpc3Q6c2FtZS1yb2xlcyIsIjp1c2VyOmxpc3Q6YWxsIl0sImlhdCI6MTU4NTQ0MDQ0OSwiZXhwIjoxNTg1NDQwNzQ5LCJpc3MiOiJteWJvb2tzLnNlcnZpY2UuYXV0aCJ9.rH1RWd8xK2eg2Q19qAqM4UQZ22ErTxrga6cmsDo8k2k\",\n    \"refresh_token\": \"7f916f90-70e9-4125-8bdb-8c672da83af1\"\n}"
						}
					]
				},
				{
					"name": "get users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user-base-url}}/user",
							"host": [
								"{{user-base-url}}"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "offset",
									"value": "5",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "get users : 200 - no params",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{user-base-url}}/user",
									"host": [
										"{{user-base-url}}"
									],
									"path": [
										"user"
									],
									"query": [
										{
											"key": "offset",
											"value": "5",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "10",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "content-length",
									"value": "212"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"user_id\": \"559c557f-8768-40b5-9abb-8c2ccbef3cb6\",\n        \"login\": \"admin\",\n        \"email\": null,\n        \"explicit_permissions\": [\n            \":user:list:non-system\",\n            \":user:list:all\",\n            \":user-token:generate\",\n            \":user:list:same-roles\"\n        ],\n        \"roles\": [\n            \"admin\"\n        ]\n    }\n]"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJkZXNjcmlwdGlvbiI6InBvc3RtYW4gdXNlciBzZXJ2aWNlIHRva2VuIiwicGVybWlzc2lvbnMiOlsiOnVzZXItdG9rZW46Z2VuZXJhdGUiLCI6dXNlcjpsaXN0OnNhbWUtcm9sZXMiLCI6dXNlcjpsaXN0Om5vbi1zeXN0ZW0iLCI6dXNlcjpsaXN0OmFsbCJdLCJpYXQiOjE1ODU1MDk5NjUsImV4cCI6MTkwMDg2OTk2NSwiaXNzIjoibXlib29rcy5zZXJ2aWNlLmF1dGgiLCJzdWIiOiJteWJvb2tzLnRlc3QucG9zdG1hbiJ9.EIKzFqyGkGcC30h11XOSTH6_xyDYSCyWN64aAsicG-Q",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "16ce8657-3ed4-4d60-a132-5de515c7dcc1",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "63405642-3dbb-4286-a85d-3b15263f6080",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}