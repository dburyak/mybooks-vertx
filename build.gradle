plugins {
    id 'com.palantir.git-version' version '0.12.2'
}

ext {
    gradleWrapperVersion = gradleVersion
}

wrapper {
    gradleVersion = gradleWrapperVersion
    distributionType = 'ALL'
}

allprojects {
    group 'dburyak.demo.mybooks'
    version gitVersion()
    ext { isRelease = versionDetails().isCleanTag }
    if (!isRelease) {
        project.version += '-SNAPSHOT'
    }
}

subprojects {
    apply plugin: 'java'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }

    sourceCompatibility = JavaVersion.VERSION_13
    targetCompatibility = JavaVersion.VERSION_13

    if (path != ':tools') {
        dependencies {
            implementation project(':tools')
        }

        ext { generatedResourcesDir = file("${buildDir}/generated-resources") }

        task generateVersionInfo() {
            def projectVersion = project.version
            def gitRevision = versionDetails().gitHashFull
            def outFiles = fileTree(generatedResourcesDir)
            inputs.property('version', projectVersion)
            inputs.property('revision', gitRevision)
            outputs.files(outFiles)
            doLast {
                generatedResourcesDir.mkdirs()
                file("${generatedResourcesDir}/version.txt").text = projectVersion
                file("${generatedResourcesDir}/revision.txt").text = gitRevision
            }
        }

        sourceSets.each {
            it.resources.srcDirs generatedResourcesDir
        }

        tasks.withType(ProcessResources) {
            dependsOn generateVersionInfo
        }
    }
}
