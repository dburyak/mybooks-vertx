import java.time.Instant

plugins {
    id 'com.palantir.git-version' version '0.12.2'
}

ext {
    gradleWrapperVersion = gradleVersion
}

wrapper {
    gradleVersion = gradleWrapperVersion
    distributionType = 'ALL'
}

allprojects {
    group 'dburyak.demo.mybooks'
    version gitVersion()
    ext { isRelease = versionDetails().isCleanTag }
    if (!isRelease) {
        project.version += '-SNAPSHOT'
    }
}

subprojects {
    apply plugin: 'java'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }

    sourceCompatibility = JavaVersion.VERSION_13
    targetCompatibility = JavaVersion.VERSION_13

    dependencies {
        // micronaut DI
        def excludeMicronautHttp = {
            exclude group: 'io.micronaut', module: 'micronaut-http'
        }
        annotationProcessor "io.micronaut:micronaut-inject-java:${micronautDiVersion}"
        implementation "io.micronaut:micronaut-inject:${micronautDiVersion}"
        testAnnotationProcessor "io.micronaut:micronaut-inject-java:${micronautDiVersion}"
        annotationProcessor "io.micronaut:micronaut-validation:${micronautDiVersion}", excludeMicronautHttp
        implementation "io.micronaut:micronaut-validation:${micronautDiVersion}", excludeMicronautHttp
        testAnnotationProcessor "io.micronaut:micronaut-validation:${micronautDiVersion}", excludeMicronautHttp
    }

    if (path != ':tools') {
        apply plugin: 'application'

        dependencies {
            implementation project(':tools')

            // log4j2 common configuration (async loggers)
            implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
            implementation "com.lmax:disruptor:${disruptorVersion}"
            implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
            implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
            implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
        }

        ext { generatedResourcesDir = file("${buildDir}/generated-resources") }

        task generateVersionInfo() {
            def projectVersion = project.version
            def gitRevision = versionDetails().gitHashFull
            def outFiles = fileTree(generatedResourcesDir)
            inputs.property('version', projectVersion)
            inputs.property('revision', gitRevision)
            outputs.files(outFiles)
            doLast {
                generatedResourcesDir.mkdirs()
                file("${generatedResourcesDir}/version.txt").text = projectVersion
                file("${generatedResourcesDir}/revision.txt").text = gitRevision
                file("${generatedResourcesDir}/built_at.txt").text = Instant.now() as String
            }
        }

        sourceSets.each {
            it.resources.srcDirs generatedResourcesDir
        }

        tasks.withType(ProcessResources) {
            dependsOn generateVersionInfo
        }

        application {
            applicationDefaultJvmArgs += [
                    '-Dmicronaut.environments=prod',
                    '-Dlog4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector',
                    '-Dlog4j2.asyncLoggerRingBufferSize=1048576', // 1024 * 1024
                    '-Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.SLF4JLogDelegateFactory',
                    '-Dhazelcast.logging.type=slf4j'
            ]
        }

        tasks.run {
            jvmArgs += [
                    '-Dmicronaut.environments=dev',
                    '-Dlog4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector',
                    '-Dlog4j2.asyncLoggerRingBufferSize=1048576', // 1024 * 1024
                    '-Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.SLF4JLogDelegateFactory',
                    '-Dhazelcast.logging.type=slf4j'
            ]
        }

        tasks.withType(Test) {
            jvmArgs += [
                    '-Dmicronaut.environments=test',
                    '-Dlog4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector',
                    '-Dlog4j2.asyncLoggerRingBufferSize=1048576', // 1024 * 1024
                    '-Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.SLF4JLogDelegateFactory',
                    '-Dhazelcast.logging.type=slf4j'
            ]
        }
    }
}
